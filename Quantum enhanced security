from qiskit import QuantumCircuit, Aer, transpile
import hashlib
import secrets
import json
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import os
import base64

# Define Quantum Simulator
simulator = Aer.get_backend('qasm_simulator')

# Define Quantum Key Distribution Protocol functions
def generate_bb84_key(length=8):
    return ''.join(str(secrets.choice([0, 1])) for _ in range(length))

def exchange_bb84_key(own_key):
    partner_basis = ''.join(secrets.choice(['X', 'Z']) for _ in range(len(own_key)))
    partner_key = [bit if partner_basis[i] == 'X' else str(secrets.choice([0, 1])) for i, bit in enumerate(own_key)]
    return partner_key, partner_basis

# Define Quantum Repeaters
def hxxh_operation(qc, qubit1, qubit2):
    qc.h(qubit1)
    qc.x(qubit1)
    qc.x(qubit2)
    qc.h(qubit1)
    qc.measure_all()

def perform_quantum_repeater(qc, qubit1, qubit2, num_repeats):
    for _ in range(num_repeats):
        hxxh_operation(qc, qubit1, qubit2)
        # Implement quantum repeater mechanism here
        # In this simplified example, we repeat the HXXH operation

# Define Cryptography Encryption and Decryption
def encrypt_message(message, key):
    fernet = Fernet(key)
    return fernet.encrypt(message.encode())

def decrypt_message(encrypted_message, key):
    fernet = Fernet(key)
    return fernet.decrypt(encrypted_message).decode()

# Function to derive a key from a passphrase
def derive_key_from_passphrase(passphrase, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        iterations=100000,  # You can adjust the number of iterations
        salt=salt,
        length=32  # Key length
    )
    return base64.urlsafe_b64encode(kdf.derive(passphrase.encode()))

# Main program
if __name__ == "__main__":
    owner_name = input("Enter your name: ")  # Collect the owner's name

    # Wallet Security Key (Private Key from Blockchain Wallet)
    wallet_security_key = "YourWalletPrivateKey".encode('utf-8')  # Convert to bytes

    # Passphrase
    passphrase = input("Enter your passphrase: ")  # User input

    # Step 2: Derive a key from the passphrase
    salt = os.urandom(16)  # Random salt
    derived_passphrase_key = derive_key_from_passphrase(passphrase, salt)

    # Step 3: Qubit Naming
    qubit_naming_seed = wallet_security_key + derived_passphrase_key

    # Generate keys
    quantum_key = generate_bb84_key()
    partner_key, partner_basis = exchange_bb84_key(quantum_key)

    # Print keys
    print("Quantum Key:", quantum_key)
    print("Partner Key:", partner_key)

    # Perform SHA-256 hash
    data = "YourDataHere"  # Replace with your actual data
    nonce = 0
    data_with_nonce = data + str(nonce)
    hash_result = hashlib.sha256(data_with_nonce.encode()).hexdigest()

    # Print the SHA-256 Hash
    print("SHA-256 Hash:", hash_result)

    # Step 4: Perform encryption and decryption using the derived passphrase key
    message = "Hello friend, this is for you. God bless!"  # Replace with your secret message
    encrypted_message = encrypt_message(message, derived_passphrase_key)
    decrypted_message = decrypt_message(encrypted_message, derived_passphrase_key)

    # Print the encrypted and decrypted messages
    print("Encrypted Message:", encrypted_message)
    print("Decrypted Message:", decrypted_message)

    # Add Quantum Repeater
    qc = QuantumCircuit(2)
    perform_quantum_repeater(qc, 0, 1, num_repeats=3)  # Example: 3 repeats

    # Clean up quantum circuit if necessary
    qc.clear()

    # Encode the derived passphrase key as Base64 for JSON serialization
    derived_passphrase_key_base64 = base64.b64encode(derived_passphrase_key).decode('utf-8')

    # Save results to a JSON file
    results = {
        "Owner Name": owner_name,
        "Quantum Key": quantum_key,
        "Partner Key": partner_key,
        "SHA-256 Hash": hash_result,
        "Encrypted Message": decrypted_message,  # Use the decrypted message as-is
        "Derived Passphrase Key (Base64)": derived_passphrase_key_base64
    }

    with open("results.json", "w") as results_file:
        json.dump(results, results_file)

    # Optionally, you can print a confirmation message
    print("Results saved to results.json")
